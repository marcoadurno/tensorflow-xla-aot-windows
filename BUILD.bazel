package(default_visibility = ["//visibility:public"])

licenses(["notice"])

llvm_targets = [
  "AArch64",
  #"AMDGPU",
  "ARM",
  "NVPTX",
  #"PowerPC",
  "X86",
]

filegroup(
    name = "docker",
    srcs = glob([
        "utils/docker/build_docker_image.sh",
    ]),
    visibility = ["//visibility:public"],
)

cc_library(
    name = "config",
    hdrs = [
        "include/llvm/Config/AsmParsers.def",
        "include/llvm/Config/AsmPrinters.def",
        "include/llvm/Config/Disassemblers.def",
        "include/llvm/Config/Targets.def",
        "include/llvm/Config/abi-breaking.h",
        #"include/llvm/Config/config.h",
        "include/llvm/Config/llvm-config.h",
    ],
    defines = [
        "_CRT_SECURE_NO_DEPRECATE",
        "_CRT_SECURE_NO_WARNINGS",
        "_CRT_NONSTDC_NO_DEPRECATE",
        "_CRT_NONSTDC_NO_WARNINGS",
        "_SCL_SECURE_NO_DEPRECATE",
        "_SCL_SECURE_NO_WARNINGS",
        "UNICODE",
        "_UNICODE",
        "__STDC_CONSTANT_MACROS",
        "__STDC_FORMAT_MACROS",
        "__STDC_LIMIT_MACROS",
    ],
    includes = ["include"]
)

[cc_library(
    name = name.lower() + "_asm_parser",
    srcs = ["lib/LLVM" + name + "AsmParser.lib"],
    deps = [
        ":" + name.lower() + "_desc",
        ":" + name.lower() + "_info",
        ":" + name.lower() + "_utils",
        ":config",
        ":mc",
        ":mc_parser",
        ":support",
    ]
) for name in llvm_targets]

[cc_library(
    name = name.lower() + "_asm_printer",
    srcs = ["lib/LLVM" + name + "AsmPrinter.lib"],
    deps = [
        ":" + name.lower() + "_utils",
        ":config",
        ":mc",
        ":support",
    ]
) for name in llvm_targets]

[cc_library(
    name = name.lower() + "_code_gen",
    srcs = ["lib/LLVM" + name + "CodeGen.lib"],
    deps = [
        ":" + name.lower() + "_asm_printer",
        ":" + name.lower() + "_desc",
        ":" + name.lower() + "_info",
        ":" + name.lower() + "_utils",
        ":analysis",
        ":asm_printer",
        ":code_gen",
        ":config",
        ":core",
        ":global_i_sel",
        ":mc",
        ":scalar",
        ":selection_dag",
        ":support",
        ":target",
    ]
) for name in llvm_targets]

[cc_library(
    name = name.lower() + "_desc",
    srcs = ["lib/LLVM" + name + "Desc.lib"],
    deps = [
        ":" + name.lower() + "_asm_printer",
        ":" + name.lower() + "_info",
        ":config",
        ":mc",
        ":support",
    ]
) for name in llvm_targets]

[cc_library(
    name = name.lower() + "_disassembler",
    srcs = ["lib/LLVM" + name + "Disassembler.lib"],
    deps = [
        ":" + name.lower() + "_desc",
        ":" + name.lower() + "_info",
        ":" + name.lower() + "_utils",
        ":config",
        ":mc",
        ":mc_disassembler",
        ":support",
    ]
) for name in llvm_targets]

[cc_library(
    name = name.lower() + "_info",
    srcs = ["lib/LLVM" + name + "Info.lib"],
    deps = [
        ":code_gen",
        ":config",
        ":support",
        ":target",
    ]
) for name in llvm_targets]

[cc_library(
    name = name.lower() + "_utils",
    srcs = ["lib/LLVM" + name + "Utils.lib"],
    deps = [
        ":config",
        ":mc",
        ":support",
    ]
) for name in llvm_targets]

cc_library(
    name = "powerpc_asm_parser",
    srcs = ["lib/LLVMPowerPCAsmParser.lib"],
    deps = [
        ":powerpc_desc",
        ":powerpc_info",
        ":config",
        ":mc",
        ":mc_parser",
        ":support",
    ]
)

cc_library(
    name = "powerpc_asm_printer",
    srcs = ["lib/LLVMPowerPCAsmPrinter.lib"],
    deps = [
        ":powerpc_info",
        ":config",
        ":mc",
        ":support",
    ]
)

cc_library(
    name = "powerpc_code_gen",
    srcs = ["lib/LLVMPowerPCCodeGen.lib"],
    deps = [
        ":powerpc_asm_printer",
        ":powerpc_desc",
        ":powerpc_info",
        ":analysis",
        ":asm_printer",
        ":code_gen",
        ":config",
        ":core",
        ":global_i_sel",
        ":mc",
        ":scalar",
        ":selection_dag",
        ":support",
        ":target",
    ]
)

cc_library(
    name = "powerpc_desc",
    srcs = ["lib/LLVMPowerPCDesc.lib"],
    deps = [
        ":powerpc_asm_printer",
        ":powerpc_info",
        ":config",
        ":mc",
        ":support",
    ]
)

cc_library(
    name = "powerpc_disassembler",
    srcs = ["lib/LLVMPowerPCDisassembler.lib"],
    deps = [
        ":powerpc_desc",
        ":powerpc_info",
        ":config",
        ":mc",
        ":mc_disassembler",
        ":support",
    ]
)

cc_library(
    name = "powerpc_info",
    srcs = ["lib/LLVMPowerPCInfo.lib"],
    deps = [
        ":code_gen",
        ":config",
        ":support",
        ":target",
    ]
)
      

cc_library(
    name = "analysis",
    srcs = ["lib/LLVMAnalysis.lib"],
    hdrs = glob([
        "include/llvm/Analysis/*.h",
        "include/llvm/Analysis/*.def",
        "include/llvm/Analysis/*.inc",
    ]),
    deps = [
        ":binary_format",
        ":config",
        ":core",
        ":object",
        ":profile_data",
        ":support",
    ],
)

cc_library(
    name = "asm_parser",
    srcs = ["lib/LLVMAsmParser.lib"],
    hdrs = glob([
        "include/llvm/AsmParser/*.h",
        "include/llvm/AsmParser/*.def",
        "include/llvm/AsmParser/*.inc",
    ]),
    deps = [
        ":binary_format",
        ":config",
        ":core",
        ":support",
    ],
)

cc_library(
    name = "asm_printer",
    srcs = ["lib/LLVMAsmPrinter.lib"],
    hdrs = glob([
        "include/llvm/CodeGen/AsmPrinter/*.h",
        "include/llvm/CodeGen/AsmPrinter/*.def",
        "include/llvm/CodeGen/AsmPrinter/*.inc",
        "lib/CodeGen/AsmPrinter/*.def",
    ]),
    deps = [
        ":analysis",
        ":binary_format",
        ":code_gen",
        ":config",
        ":core",
        ":debug_info_code_view",
        ":debug_info_msf",
        ":mc",
        ":mc_parser",
        ":support",
        ":target",
    ],
)

cc_library(
    name = "binary_format",
    srcs = ["lib/LLVMBinaryFormat.lib"],
    hdrs = glob([
        "include/llvm/BinaryFormat/*.h",
        "include/llvm/BinaryFormat/*.def",
        "include/llvm/BinaryFormat/*.inc",
        "include/llvm/BinaryFormat/ELFRelocs/*.def",
        "include/llvm/BinaryFormat/WasmRelocs/*.def",
    ]),
    deps = [
        ":config",
        ":support",
    ],
)

cc_library(
    name = "bit_reader",
    srcs = ["lib/LLVMBitReader.lib"],
    hdrs = glob([
        "include/llvm/Bitcode/Reader/*.h",
        "include/llvm/Bitcode/Reader/*.def",
        "include/llvm/Bitcode/Reader/*.inc",
        "include/llvm/Bitcode/BitstreamReader.h",
    ]),
    deps = [
        ":config",
        ":core",
        ":support",
    ],
)

cc_library(
    name = "bit_writer",
    srcs = ["lib/LLVMBitWriter.lib"],
    hdrs = glob([
        "include/llvm/Bitcode/Writer/*.h",
        "include/llvm/Bitcode/Writer/*.def",
        "include/llvm/Bitcode/Writer/*.inc",
        "include/llvm/Bitcode/BitcodeWriter.h",
        "include/llvm/Bitcode/BitcodeWriterPass.h",
        "include/llvm/Bitcode/BitstreamWriter.h",
    ]),
    deps = [
        ":analysis",
        ":config",
        ":core",
        ":mc",
        ":object",
        ":support",
    ],
)

cc_library(
    name = "code_gen",
    srcs = ["lib/LLVMCodeGen.lib"],
    hdrs = glob([
        "include/llvm/CodeGen/*.h",
        "include/llvm/CodeGen/*.def",
        "include/llvm/CodeGen/*.inc",
        "include/llvm/CodeGen/**/*.h",
    ]),
    deps = [
        ":analysis",
        ":bit_reader",
        ":bit_writer",
        ":config",
        ":core",
        ":instrumentation",
        ":mc",
        ":profile_data",
        ":scalar",
        ":support",
        ":target",
        ":transform_utils",
    ],
)

cc_library(
    name = "core",
    srcs = ["lib/LLVMCore.lib"],
    hdrs = glob([
        "include/llvm/IR/*.h",
        "include/llvm/IR/*.def",
        "include/llvm/IR/*.inc",
        "include/llvm/*.h",
        "include/llvm/Analysis/*.def",
    ]),
    deps = [
        ":binary_format",
        ":config",
        ":support",
    ],
)

cc_library(
    name = "debug_info_code_view",
    srcs = ["lib/LLVMDebugInfoCodeView.lib"],
    hdrs = glob([
        "include/llvm/DebugInfo/CodeView/*.h",
        "include/llvm/DebugInfo/CodeView/*.def",
        "include/llvm/DebugInfo/CodeView/*.inc",
    ]),
    deps = [
        ":binary_format",
        ":config",
        ":debug_info_msf",
        ":support",
    ],
)

cc_library(
    name = "debug_info_msf",
    srcs = ["lib/LLVMDebugInfoMSF.lib"],
    hdrs = glob([
        "include/llvm/DebugInfo/MSF/*.h",
        "include/llvm/DebugInfo/MSF/*.def",
        "include/llvm/DebugInfo/MSF/*.inc",
    ]),
    deps = [
        ":config",
        ":support",
    ],
)

cc_library(
    name = "demangle",
    srcs = ["lib/LLVMDemangle.lib"],
    hdrs = glob([
        "include/llvm/Demangle/*.h",
        "include/llvm/Demangle/*.def",
        "include/llvm/Demangle/*.inc",
    ]),
    deps = [":config"],
)

cc_library(
    name = "execution_engine",
    srcs = ["lib/LLVMExecutionEngine.lib"],
    hdrs = glob([
        "include/llvm/ExecutionEngine/*.h",
        "include/llvm/ExecutionEngine/*.def",
        "include/llvm/ExecutionEngine/*.inc",
    ]),
    deps = [
        ":config",
        ":core",
        ":mc",
        ":object",
        ":runtime_dyld",
        ":support",
        ":target",
    ],
)

cc_library(
    name = "global_i_sel",
    srcs = ["lib/LLVMGlobalISel.lib"],
    hdrs = glob([
        "include/llvm/CodeGen/GlobalISel/*.h",
        "include/llvm/CodeGen/GlobalISel/*.def",
        "include/llvm/CodeGen/GlobalISel/*.inc",
    ]),
    deps = [
        ":analysis",
        ":code_gen",
        ":config",
        ":core",
        ":mc",
        ":support",
        ":target",
        ":transform_utils",
    ],
)

cc_library(
    name = "instrumentation",
    srcs = ["lib/LLVMInstrumentation.lib"],
    hdrs = glob([
        "include/llvm/Transforms/Instrumentation/*.h",
        "include/llvm/Transforms/Instrumentation/*.def",
        "include/llvm/Transforms/Instrumentation/*.inc",
        "include/llvm/Transforms/GCOVProfiler.h",
        "include/llvm/Transforms/Instrumentation.h",
        "include/llvm/Transforms/InstrProfiling.h",
        "include/llvm/Transforms/PGOInstrumentation.h",
    ]),
    deps = [
        ":analysis",
        ":config",
        ":core",
        ":mc",
        ":profile_data",
        ":support",
        ":transform_utils",
    ],
)

cc_library(
    name = "inst_combine",
    srcs = ["lib/LLVMInstCombine.lib"],
    hdrs = glob([
        "include/llvm/Transforms/InstCombine/*.h",
        "include/llvm/Transforms/InstCombine/*.def",
        "include/llvm/Transforms/InstCombine/*.inc",
    ]),
    deps = [
        ":analysis",
        ":config",
        ":core",
        ":support",
        ":transform_utils",
    ],
)

cc_library(
    name = "ipo",
    srcs = ["lib/LLVMipo.lib"],
    hdrs = glob([
        "include/llvm/Transforms/IPO/*.h",
        "include/llvm/Transforms/IPO/*.def",
        "include/llvm/Transforms/IPO/*.inc",
    ]),
    deps = [
        ":analysis",
        ":bit_reader",
        ":bit_writer",
        ":config",
        ":core",
        ":inst_combine",
        ":instrumentation",
        ":ir_reader",
        ":linker",
        ":object",
        ":profile_data",
        ":scalar",
        ":support",
        ":transform_utils",
        ":vectorize",
    ],
)

cc_library(
    name = "ir_reader",
    srcs = ["lib/LLVMIRReader.lib"],
    hdrs = glob([
        "include/llvm/IRReader/*.h",
        "include/llvm/IRReader/*.def",
        "include/llvm/IRReader/*.inc",
    ]),
    deps = [
        ":asm_parser",
        ":bit_reader",
        ":config",
        ":core",
        ":support",
    ],
)

cc_library(
    name = "linker",
    srcs = ["lib/LLVMLinker.lib"],
    hdrs = glob([
        "include/llvm/Linker/*.h",
        "include/llvm/Linker/*.def",
        "include/llvm/Linker/*.inc",
    ]),
    deps = [
        ":config",
        ":core",
        ":support",
        ":transform_utils",
    ],
)

cc_library(
    name = "mc",
    srcs = ["lib/LLVMMC.lib"],
    hdrs = glob([
        "include/llvm/MC/*.h",
        "include/llvm/MC/*.def",
        "include/llvm/MC/*.inc",
    ]),
    deps = [
        ":binary_format",
        ":config",
        ":debug_info_code_view",
        ":support",
    ],
)

cc_library(
    name = "mc_disassembler",
    srcs = ["lib/LLVMMCDisassembler.lib"],
    hdrs = glob([
        "include/llvm/MC/MCDisassembler/*.h",
        "include/llvm/MC/MCDisassembler/*.def",
        "include/llvm/MC/MCDisassembler/*.inc",
    ]),
    deps = [
        ":config",
        ":mc",
        ":support",
    ],
)

cc_library(
    name = "mc_parser",
    srcs = ["lib/LLVMMCParser.lib"],
    hdrs = glob([
        "include/llvm/MC/MCParser/*.h",
        "include/llvm/MC/MCParser/*.def",
        "include/llvm/MC/MCParser/*.inc",
    ]),
    deps = [
        ":config",
        ":mc",
        ":support",
    ],
)

cc_library(
    name = "object",
    srcs = ["lib/LLVMObject.lib"],
    hdrs = glob([
        "include/llvm/Object/*.h",
        "include/llvm/Object/*.def",
        "include/llvm/Object/*.inc",
    ]),
    deps = [
        ":binary_format",
        ":bit_reader",
        ":config",
        ":core",
        ":mc",
        ":mc_parser",
        ":support",
    ],
)

cc_library(
    name = "objc_arc",
    srcs = ["lib/LLVMObjCARCOpts.lib"],
    hdrs = glob([
        "include/llvm/Transforms/ObjCARC/*.h",
        "include/llvm/Transforms/ObjCARC/*.def",
        "include/llvm/Transforms/ObjCARC/*.inc",
    ]),
    deps = [
        ":analysis",
        ":config",
        ":core",
        ":support",
        ":transform_utils",
    ],
)

cc_library(
    name = "orc_jit",
    srcs = ["lib/LLVMOrcJIT.lib"],
    hdrs = glob([
        "include/llvm/ExecutionEngine/Orc/*.h",
        "include/llvm/ExecutionEngine/Orc/*.def",
        "include/llvm/ExecutionEngine/Orc/*.inc",
    ]),
    deps = [
        ":config",
        ":core",
        ":execution_engine",
        ":object",
        ":runtime_dyld",
        ":support",
        ":transform_utils",
    ],
)

cc_library(
    name = "profile_data",
    srcs = ["lib/LLVMProfileData.lib"],
    hdrs = glob([
        "include/llvm/ProfileData/*.h",
        "include/llvm/ProfileData/*.def",
        "include/llvm/ProfileData/*.inc",
    ]),
    deps = [
        ":config",
        ":core",
        ":support",
    ],
)

cc_library(
    name = "runtime_dyld",
    srcs = ["lib/LLVMRuntimeDyld.lib"],
    hdrs = glob([
        "include/llvm/ExecutionEngine/RuntimeDyld/*.h",
        "include/llvm/ExecutionEngine/RuntimeDyld/*.def",
        "include/llvm/ExecutionEngine/RuntimeDyld/*.inc",
        "include/llvm/DebugInfo/DIContext.h",
        "include/llvm/ExecutionEngine/RTDyldMemoryManager.h",
        "include/llvm/ExecutionEngine/RuntimeDyld*.h",
    ]),
    deps = [
        ":config",
        ":mc",
        ":mc_disassembler",
        ":object",
        ":support",
    ],
)

cc_library(
    name = "scalar",
    srcs = ["lib/LLVMScalarOpts.lib"],
    hdrs = glob([
        "include/llvm/Transforms/Scalar/*.h",
        "include/llvm/Transforms/Scalar/*.def",
        "include/llvm/Transforms/Scalar/*.inc",
        "include/llvm/Transforms/IPO.h",
        "include/llvm/Transforms/IPO/SCCP.h",
    ]),
    deps = [
        ":analysis",
        ":config",
        ":core",
        ":inst_combine",
        ":support",
        ":target",
        ":transform_utils",
    ],
)

cc_library(
    name = "selection_dag",
    srcs = ["lib/LLVMSelectionDAG.lib"],
    hdrs = glob([
        "include/llvm/CodeGen/SelectionDAG/*.h",
        "include/llvm/CodeGen/SelectionDAG/*.def",
        "include/llvm/CodeGen/SelectionDAG/*.inc",
    ]),
    deps = [
        ":analysis",
        ":code_gen",
        ":config",
        ":core",
        ":mc",
        ":support",
        ":target",
        ":transform_utils",
    ],
)

cc_library(
    name = "support",
    srcs = ["lib/LLVMSupport.lib"],
    hdrs = glob([
        "include/llvm/Support/*.h",
        "include/llvm/Support/*.def",
        "include/llvm/Support/*.inc",
        "include/llvm/ADT/*.h",
        "include/llvm/Support/ELFRelocs/*.def",
        "include/llvm/Support/WasmRelocs/*.def",
    ]) + [
        "include/llvm/BinaryFormat/MachO.def",
        "include/llvm/ExecutionEngine/ObjectMemoryBuffer.h",
    ],
    deps = [
        ":config",
        ":demangle",
        "@zlib_archive//:zlib",
    ],
)

cc_library(
    name = "table_gen",
    srcs = ["lib/LLVMTableGen.lib"],
    hdrs = glob([
        "include/llvm/TableGen/*.h",
        "include/llvm/TableGen/*.def",
        "include/llvm/TableGen/*.inc",
        "include/llvm/Target/*.def",
    ]),
    deps = [
        ":config",
        ":mc",
        ":support",
    ],
)

cc_library(
    name = "target",
    srcs = ["lib/LLVMTarget.lib"],
    hdrs = glob([
        "include/llvm/Target/*.h",
        "include/llvm/Target/*.def",
        "include/llvm/Target/*.inc",
        "include/llvm/CodeGen/*.def",
    ]),
    deps = [
        ":analysis",
        ":config",
        ":core",
        ":mc",
        ":support",
    ],
)

cc_library(
    name = "transform_utils",
    srcs = ["lib/LLVMTransformUtils.lib"],
    hdrs = glob([
        "include/llvm/Transforms/Utils/*.h",
        "include/llvm/Transforms/Utils/*.def",
        "include/llvm/Transforms/Utils/*.inc",
    ]),
    deps = [
        ":analysis",
        ":config",
        ":core",
        ":support",
    ],
)

cc_library(
    name = "vectorize",
    srcs = ["lib/LLVMVectorize.lib"],
    hdrs = glob([
        "include/llvm/Transforms/Vectorize/*.h",
        "include/llvm/Transforms/Vectorize/*.def",
        "include/llvm/Transforms/Vectorize/*.inc",
        "include/llvm/Transforms/Vectorize.h",
    ]),
    deps = [
        ":analysis",
        ":config",
        ":core",
        ":scalar",
        ":support",
        ":transform_utils",
    ],
)